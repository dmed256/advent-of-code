#!/usr/bin/env python3
#
# Usage:
#     .run-tests LANGUAGE
#
# Run tests for the given language
import argparse
import os
import subprocess
import sys
from collections import namedtuple
from itertools import groupby
from datetime import datetime
from termcolor import colored


#---[ Constants ]-----------------------
SLOW_TEST_LOG_COUNT = 30

skip_tests = {
    'python': [
        # Tons of md5 hashes
        (2015, 4),
        (2016, 5),
        (2016, 14),
        # Haven't investigated yet
        (2016, 18),
        # Haven't investigated yet
        (2017, 15),
        # Haven't investigated yet
        (2018, 14),
        # Haven't investigated yet
        (2019, 18),
        # Each iteration is too slow, need to think of how to
        # either process the next moves faster or create the
        # priority queue in a smarter way
        (2021, 23),
        # I had to use C++ to run this quick enough :(
        (2021, 24),
    ]
}

implemented_languages = [
    'python',
    'rust',
]

language_extensions = {
    'python': 'py',
    'c++': 'cpp',
    'rust': 'rs',
    'go': 'go',
}


#---[ Helper Types ]--------------------
class TimeTaken:
    def __init__(self, minutes=0, seconds=0):
        self.minutes = int(minutes)
        self.seconds = seconds

    def __str__(self):
        if self.minutes and self.seconds < 10:
            seconds_taken = f'0{self.seconds:.3f}'
        else:
            seconds_taken = f'{self.seconds:.3f}'

        if self.minutes:
            return f'{self.minutes}m{seconds_taken}s'
        else:
            return f'{seconds_taken}s'

    def __lt__(self, other):
        s1 = (self.minutes * 60) + self.seconds
        s2 = (other.minutes * 60) + other.seconds
        return s1 < s2

    def __add__(self, other):
        total_seconds = (
            (self.minutes * 60)
            + self.seconds
            + (other.minutes * 60)
            + other.seconds
        )

        return TimeTaken(
            minutes=(total_seconds // 60),
            seconds=(total_seconds % 60),
        )


class TestLog:
    def __init__(self, filename, time_taken, passed, output):
        self.filename = filename
        self.time_taken = time_taken
        self.passed = passed
        self.output = output

    def __lt__(self, other):
        return self.time_taken < other.time_taken

    def __add__(self, other):
        return self.time_taken + other.time_taken


#---[ Colors ]--------------------------
def blue(value):
    return colored(value, 'blue')

def green(value):
    return colored(value, 'green')

def purple(value):
    return colored(value, 'magenta')

def red(value):
    return colored(value, 'red')

def yellow(value):
    return colored(value, 'yellow')


#---[ Test Runner ]---------------------
def print_header(content, color='magenta', width=50):
    header = f'#---[ {content} ]'
    header += '-' * (width - len(header))
    print(colored(header, color))


def print_footer(color='magenta', width=50):
    print(colored('#' + ('=' * (width - 1)) + '\n', color))


def build_test(language, year, day, filename):
    build_script = f'{language}/build'
    if not os.path.exists(build_script):
        return None

    print(f'''Building {blue(filename)}: ''', end='')
    res = subprocess.run(
        [build_script, str(year), str(day)],
        capture_output=True,
    )
    if res.returncode == 0:
        print(f'''Building {blue(filename)}: ''', end='')
        return None

    return TestLog(
        filename=filename,
        time_taken=None,
        passed=False,
        output=res.stdout,
    )


def run_test(language, year, day):
    ext = language_extensions[language]
    filename = f'{language}/{year}/{day:02d}.{ext}'

    build_script = f'{language}/build'
    run_script   = f'{language}/run'

    if os.path.exists(build_script):
        error_log = run_command(
            'Compiling',
            [build_script, year, day],
            filename
        )
        if not error_log.passed:
            return error_log

    return run_command(
        'Testing',
        [run_script, year, day],
        filename
    )


def run_command(command_type, command, filename):
    print(f'''{command_type:<10} {blue(filename)}: ''', end='')

    start = datetime.now()
    res = subprocess.run(
        [str(arg) for arg in command],
        capture_output=True,
    )
    end = datetime.now()

    time_taken = (end - start).total_seconds()
    time_taken = TimeTaken(
        minutes=(int(time_taken) // 60),
        seconds=(time_taken % 60)
    )

    passed = (res.returncode == 0)
    if passed:
        status = green('PASSED')
    else:
        status = red('FAILED')

    time_taken_str = f'(Time taken: {time_taken})'
    print(f'''{status} {yellow(time_taken_str)}''')

    return TestLog(
        filename=filename,
        time_taken=time_taken,
        passed=passed,
        output=res.stdout,
    )


def run_tests(language):
    ext = language_extensions[language]
    aoc_dir = os.path.abspath(
        os.path.dirname(__file__)
    )

    first_year = 2015
    current_year = datetime.now().year
    year_directories = {
        dirname: year
        for year in range(first_year, current_year + 1)
        for dirname in [str(year), f'aoc{year}']
    }

    tests = []
    for root, dirs, files in os.walk(aoc_dir):
        found_years = [
            year
            for part in root.split('/')
            if (year := year_directories.get(part))
        ]
        if not found_years:
            continue

        year = found_years[0]

        for filename in files:
            if not filename.endswith(ext):
                continue

            day = os.path.splitext(filename)[0]
            if day.isdigit():
                tests.append((int(year), int(day)))

    logs = []
    total_time_taken = TimeTaken()

    prev_year = None
    for year, tests in groupby(sorted(tests), lambda test: test[0]):
        print_header(year)

        for _, day in tests:
            if (year, day) in skip_tests.get(language, []):
                print(red(f'''{'Skipping':<10} {year}/{day:02d}.py'''))
                continue

            log = run_test(language, year, day)
            total_time_taken += log.time_taken

            logs.append(log)

        print_footer()

    print(yellow(f'Total time taken: {total_time_taken}'))

    slowest_test_logs = sorted(
        logs,
        key=lambda log: log.time_taken,
        reverse=True,
    )[:SLOW_TEST_LOG_COUNT]

    print(yellow(f'\nSlowest {len(slowest_test_logs)} tests:'))
    for idx, log in enumerate(slowest_test_logs):
        print(f'''{idx + 1:>2}) {blue(log.filename)}: {yellow(str(log.time_taken))}''')


    failed_test_logs = [
        test
        for test in logs
        if not test.passed
    ]
    if not failed_test_logs:
        return True

    print(red(f'\nFailed tests: {len(failed_test_logs)}'))
    for log in failed_test_logs:
        print(red(f'- {log.filename}'))

    print()
    for log in failed_test_logs:
        print_header(log.filename, color='red')
        print(log.output.decode('utf-8'))
        print_footer(color='red')

    return False


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Run test suite for a given language'
    )

    parser.add_argument('language',
                        metavar='LANGUAGE',
                        choices=implemented_languages,
                        help='Run the test suite for the given language')

    args = parser.parse_args()

    successful = run_tests(args.language)
    if not successful:
        sys.exit(1)
